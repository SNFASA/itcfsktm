</>
  )
}

// ========================================
// 2. GALLERY SECTION COMPONENT
// ========================================

// components/public/GallerySection.tsx
'use client'
import { useState, useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import { motion, AnimatePresence } from 'framer-motion'
import Image from 'next/image'
import Link from 'next/link'
import { getRecentGalleryItems, type GalleryItem } from '@/lib/public/galleryEvents'

const fadeInUpSection = {
  hidden: { opacity: 0, y: 60 },
  visible: { opacity: 1, y: 0 },
}

const staggerContainer = {
  hidden: {},
  visible: {
    transition: {
      staggerChildren: 0.15,
    },
  },
}

const scaleInSection = {
  hidden: { opacity: 0, scale: 0.8, rotate: 0 },
  visible: { opacity: 1, scale: 1 },
}

const getSizeClassesSection = (size: 'small' | 'medium' | 'large') => {
  switch (size) {
    case 'small':
      return 'w-full sm:w-64 md:w-72 h-48 sm:h-56'
    case 'medium':
      return 'w-full sm:w-72 md:w-80 h-56 sm:h-64'
    case 'large':
      return 'w-full sm:w-80 md:w-96 h-64 sm:h-72'
    default:
      return 'w-full sm:w-72 md:w-80 h-56 sm:h-64'
  }
}

const getRandomRotationSection = (id: string) => {
  // Use the ID to generate a consistent "random" rotation
  const hash = id.split('').reduce((a, b) => {
    a = ((a << 5) - a) + b.charCodeAt(0)
    return a & a
  }, 0)
  return (hash % 15) - 7.5 // Range from -7.5 to 7.5 degrees
}

function GalleryCardSection({ item }: { item: GalleryItem }) {
  const [showPreview, setShowPreview] = useState(false)

  const handleMorePicsClick = (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    window.location.href = `/gallery/event/${item.id}`
  }

  const handleCardClick = () => {
    window.location.href = `/gallery/event/${item.id}`
  }

  // Format date for display
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      })
    } catch {
      return dateString
    }
  }

  const rotation = getRandomRotationSection(item.id)

  return (
    <motion.div
      className="relative group cursor-pointer"
      style={{ rotate: `${rotation}deg` }}
      variants={scaleInSection}
      transition={{ duration: 0.6, ease: [0.25, 0.1, 0.25, 1] }}
      onHoverStart={() => {
        setTimeout(() => setShowPreview(true), 200)
      }}
      onHoverEnd={() => {
        setShowPreview(false)
      }}
      whileHover={{ 
        rotate: 0,
        scale: 1.05,
        zIndex: 10,
        transition: { duration: 0.3, ease: 'easeOut' }
      }}
      onClick={handleCardClick}
    >
      {/* Main Card */}
      <div className={`${getSizeClassesSection(item.size)} relative overflow-hidden rounded-xl shadow-xl hover:shadow-2xl transition-all duration-500 bg-gradient-to-br from-primary via-primary to-primary/90`}>
        {/* Image Container */}
        <div className="relative h-3/4 overflow-hidden">
          <Image
            src={item.main_image}
            alt={item.title}
            fill
            className="object-cover transition-transform duration-700 group-hover:scale-110"
            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, 33vw"
          />
          
          {/* Image overlay */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-60 group-hover:opacity-80 transition-opacity duration-300" />
          
          {/* Shine effect */}
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out" />
          
          {/* Category badge */}
          <div className="absolute top-3 left-3">
            <span className="bg-white/20 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-full border border-white/30 capitalize">
              {item.category}
            </span>
          </div>

          {/* Date badge */}
          <div className="absolute top-3 right-3">
            <span className="bg-black/30 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-full">
              {formatDate(item.date)}
            </span>
          </div>

          {/* Featured badge */}
          {item.featured && (
            <div className="absolute top-12 left-3">
              <span className="bg-yellow-500/90 backdrop-blur-sm text-black text-xs font-bold px-2 py-1 rounded-full border border-yellow-400">
                Featured
              </span>
            </div>
          )}
        </div>

        {/* Content Section */}
        <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-primary via-primary/95 to-transparent">
          <h3 className="font-karla font-bold text-white text-sm sm:text-base mb-2 line-clamp-2">
            {item.title}
          </h3>
          
          <p className="text-white/80 text-xs mb-3 line-clamp-2 font-karla">
            {item.description}
          </p>
          
          {/* Tags */}
          {item.tags && item.tags.length > 0 && (
            <div className="flex flex-wrap gap-1 mb-2">
              {item.tags.slice(0, 2).map((tag, idx) => (
                <span key={idx} className="bg-white/10 text-white text-xs px-2 py-0.5 rounded-full">
                  {tag}
                </span>
              ))}
              {item.tags.length > 2 && (
                <span className="bg-white/10 text-white text-xs px-2 py-0.5 rounded-full">
                  +{item.tags.length - 2}
                </span>
              )}
            </div>
          )}
          
          <button 
            onClick={handleMorePicsClick}
            className="relative overflow-hidden bg-white/10 hover:bg-white/20 backdrop-blur-sm text-white text-xs sm:text-sm font-medium px-3 py-1.5 rounded-full transition-all duration-300 group/btn border border-white/20 hover:border-white/40"
          >
            <span className="relative z-10 flex items-center gap-1">
              More Pics ({item.additional_images?.length || 0})
              <svg className="w-3 h-3 transition-transform duration-300 group-hover/btn:translate-x-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </span>
            <div className="absolute inset-0 bg-white/10 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300 rounded-full" />
          </button>
        </div>

        {/* Border glow effect */}
        <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-white/20 via-transparent to-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" style={{ padding: '1px' }}>
          <div className="w-full h-full rounded-xl bg-transparent" />
        </div>
      </div>

      {/* Additional Images Preview */}
      <AnimatePresence>
        {showPreview && item.additional_images && item.additional_images.length > 0 && (
          <motion.div
            className="absolute -right-2 top-1/2 transform -translate-y-1/2 z-20"
            initial={{ opacity: 0, x: -20, scale: 0.8 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: -20, scale: 0.8 }}
            transition={{ duration: 0.3, ease: 'easeOut' }}
          >
            <div className="bg-white/95 backdrop-blur-md rounded-lg p-3 shadow-2xl border border-white/20 max-w-48">
              <p className="text-xs font-medium text-gray-700 mb-2">More from this event:</p>
              <div className="grid grid-cols-2 gap-2">
                {item.additional_images.slice(0, 4).map((img, idx) => (
                  <motion.div
                    key={idx}
                    className="relative w-20 h-16 rounded-md overflow-hidden"
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.2, delay: idx * 0.05 }}
                  >
                    <Image
                      src={img}
                      alt={`${item.title} ${idx + 1}`}
                      fill
                      className="object-cover hover:scale-110 transition-transform duration-300"
                      sizes="80px"
                    />
                  </motion.div>
                ))}
              </div>
              {item.additional_images.length > 4 && (
                <p className="text-xs text-gray-500 mt-2 text-center">
                  +{item.additional_images.length - 4} more
                </p>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Glow Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/30 to-primary/50 rounded-xl blur-xl opacity-0 group-hover:opacity-70 transition-all duration-500 -z-10 transform translate-y-4 scale-95 group-hover:scale-100" />
    </motion.div>
  )
}











// ========================================
// 5. GALLERY EVENTS LIBRARY (ENHANCED)
// ========================================

// lib/public/galleryEvents.ts (Enhanced version with better error handling)
import { supabase } from "@/lib/supabaseClient"

export type GalleryCategory = 'events' | 'campus' | 'academic' | 'sports' | 'cultural' | 'graduation' | 'workshop' | 'conference' | 'seminar'

export interface GalleryItem {
  id: string
  title: string
  description: string
  main_image: string
  additional_images: string[]
  tags: string[]
  category: GalleryCategory
  size: 'small' | 'medium' | 'large'
  date: string
  featured: boolean
  created_at: string
  updated_at: string
}

// Enhanced error handling wrapper
const withErrorHandling = async <T>(
  operation: () => Promise<T>,
  fallback: T,
  operationName: string
): Promise<T> => {
  try {
    if (!supabase) {
      console.error(`${operationName}: Supabase client not initialized`)
      return fallback
    }
    return await operation()
  } catch (error) {
    console.error(`${operationName} error:`, error)
    return fallback
  }
}

// Get gallery item by ID
export const getGalleryItemById = async (id: string): Promise<GalleryItem | null> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .eq('id', id)
      .single()

    if (error) {
      console.error('Error fetching gallery item by ID:', error.message)
      return null
    }

    return data as GalleryItem
  }, null, 'getGalleryItemById')
}

// Get gallery items by category
export const getGalleryItemsByCategory = async (category: GalleryCategory): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .eq('category', category)
      .order('date', { ascending: false })

    if (error) {
      console.error('Error fetching gallery items by category:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getGalleryItemsByCategory')
}

// Get all unique categories (enhanced)
export const getAllCategories = async (): Promise<GalleryCategory[]> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('category')

    if (error) {
      console.error('Error fetching categories:', error.message)
      return []
    }

    if (!data || !Array.isArray(data) || data.length === 0) {
      return []
    }

    const categories = data
      .map(item => item.category)
      .filter(Boolean)
      .filter((category): category is GalleryCategory => 
        typeof category === 'string' && category.length > 0
      )
    
    const uniqueCategories = Array.from(new Set(categories))
    
    return uniqueCategories
  }, [], 'getAllCategories')
}

// Get recent gallery items (ordered by date descending)
export const getRecentGalleryItems = async (limit: number = 6): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .order('date', { ascending: false })
      .limit(Math.max(1, limit))

    if (error) {
      console.error('Error fetching recent gallery items:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getRecentGalleryItems')
}

// Get all gallery items (enhanced)
export const getAllGalleryItems = async (): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .order('date', { ascending: false })

    if (error) {
      console.error('Error fetching all gallery items:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getAllGalleryItems')
}

// Get featured gallery items
export const getFeaturedGalleryItems = async (limit?: number): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    let query = supabase!
      .from('galleryitem')
      .select('*')
      .eq('featured', true)
      .order('date', { ascending: false })

    if (limit && limit > 0) {
      query = query.limit(limit)
    }

    const { data, error } = await query

    if (error) {
      console.error('Error fetching featured gallery items:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getFeaturedGalleryItems')
}

// Create new gallery item
export const createGalleryItem = async (item: Omit<GalleryItem, 'id' | 'created_at' | 'updated_at'>): Promise<GalleryItem | null> => {
  return withErrorHandling(async () => {
    // Validate required fields
    if (!item.title || !item.main_image || !item.category || !item.date) {
      console.error('Missing required fields for gallery item creation')
      return null
    }

    const { data, error } = await supabase!
      .from('galleryitem')
      .insert([{
        ...item,
        additional_images: item.additional_images || [],
        tags: item.tags || [],
        featured: item.featured || false
      }])
      .select()
      .single()

    if (error) {
      console.error('Error creating gallery item:', error.message)
      return null
    }

    return data as GalleryItem
  }, null, 'createGalleryItem')
}

// Update gallery item
export const updateGalleryItem = async (id: string, updates: Partial<Omit<GalleryItem, 'id' | 'created_at' | 'updated_at'>>): Promise<GalleryItem | null> => {
  return withErrorHandling(async () => {
    if (!id || Object.keys(updates).length === 0) {
      console.error('Invalid ID or no updates provided')
      return null
    }

    const { data, error } = await supabase!
      .from('galleryitem')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) {
      console.error('Error updating gallery item:', error.message)
      return null
    }

    return data as GalleryItem
  }, null, 'updateGalleryItem')
}

// Delete gallery item
export const deleteGalleryItem = async (id: string): Promise<boolean> => {
  return withErrorHandling(async () => {
    if (!id) {
      console.error('No ID provided for deletion')
      return false
    }

    const { error } = await supabase!
      .from('galleryitem')
      .delete()
      .eq('id', id)

    if (error) {
      console.error('Error deleting gallery item:', error.message)
      return false
    }

    return true
  }, false, 'deleteGalleryItem')
}

// Search gallery items by title, description, or tags (enhanced)
export const searchGalleryItems = async (searchTerm: string): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    if (!searchTerm || searchTerm.trim().length === 0) {
      return []
    }

    const cleanedTerm = searchTerm.trim()
    
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .or(`title.ilike.%${cleanedTerm}%,description.ilike.%${cleanedTerm}%,tags.cs.{${cleanedTerm}}`)
      .order('date', { ascending: false })

    if (error) {
      console.error('Error searching gallery items:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'searchGalleryItems')
}

// Get gallery items by date range
export const getGalleryItemsByDateRange = async (startDate: string, endDate: string): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    if (!startDate || !endDate) {
      console.error('Start date and end date are required')
      return []
    }

    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .gte('date', startDate)
      .lte('date', endDate)
      .order('date', { ascending: false })

    if (error) {
      console.error('Error fetching gallery items by date range:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getGalleryItemsByDateRange')
}

// Get gallery items by size
export const getGalleryItemsBySize = async (size: 'small' | 'medium' | 'large'): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from('galleryitem')
      .select('*')
      .eq('size', size)
      .order('date', { ascending: false })

    if (error) {
      console.error('Error fetching gallery items by size:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getGalleryItemsBySize')
}

// Test Supabase connection for gallery items
export const testGallerySupabaseConnection = async (): Promise<boolean> => {
  return withErrorHandling(async () => {
    const { data, error } = await supabase!
      .from("galleryitem")
      .select("count", { count: 'exact' })
      .limit(1)

    if (error) {
      console.log("Gallery Supabase connection test failed:", error.message)
      return false
    }

    console.log("Gallery Supabase connection successful")
    return true
  }, false, 'testGallerySupabaseConnection')
}

// Get total count of gallery items
export const getGalleryItemsCount = async (): Promise<number> => {
  return withErrorHandling(async () => {
    const { count, error } = await supabase!
      .from('galleryitem')
      .select('*', { count: 'exact', head: true })

    if (error) {
      console.error('Error getting gallery items count:', error.message)
      return 0
    }

    return count || 0
  }, 0, 'getGalleryItemsCount')
}

// Get gallery items with pagination (enhanced)
export const getGalleryItemsPaginated = async (
  page: number = 1,
  itemsPerPage: number = 10,
  category?: GalleryCategory,
  searchTerm?: string
): Promise<{ items: GalleryItem[]; totalCount: number; totalPages: number }> => {
  return withErrorHandling(async () => {
    const safePage = Math.max(1, page)
    const safeItemsPerPage = Math.max(1, Math.min(100, itemsPerPage)) // Limit to 100 items max per page
    
    const start = (safePage - 1) * safeItemsPerPage
    const end = start + safeItemsPerPage - 1

    let query = supabase!
      .from('galleryitem')
      .select('*', { count: 'exact' })
      .order('date', { ascending: false })
      .range(start, end)

    if (category) {
      query = query.eq('category', category)
    }

    if (searchTerm && searchTerm.trim()) {
      const cleanedTerm = searchTerm.trim()
      query = query.or(`title.ilike.%${cleanedTerm}%,description.ilike.%${cleanedTerm}%`)
    }

    const { data, count, error } = await query

    if (error) {
      console.error('Error fetching paginated gallery items:', error.message)
      return { items: [], totalCount: 0, totalPages: 0 }
    }

    const totalPages = Math.ceil((count || 0) / safeItemsPerPage)

    return {
      items: (data as GalleryItem[]) || [],
      totalCount: count || 0,
      totalPages
    }
  }, { items: [], totalCount: 0, totalPages: 0 }, 'getGalleryItemsPaginated')
}

// Get gallery items with advanced filtering and sorting
export const getFilteredGalleryItems = async (options: {
  category?: GalleryCategory
  featured?: boolean
  searchTerm?: string
  sortBy?: 'newest' | 'oldest' | 'title' | 'featured'
  limit?: number
  tags?: string[]
}): Promise<GalleryItem[]> => {
  return withErrorHandling(async () => {
    let query = supabase!.from('galleryitem').select('*')

    // Apply filters
    if (options.category) {
      query = query.eq('category', options.category)
    }

    if (options.featured !== undefined) {
      query = query.eq('featured', options.featured)
    }

    if (options.searchTerm && options.searchTerm.trim()) {
      const cleanedTerm = options.searchTerm.trim()
      query = query.or(`title.ilike.%${cleanedTerm}%,description.ilike.%${cleanedTerm}%`)
    }

    if (options.tags && options.tags.length > 0) {
      query = query.overlaps('tags', options.tags)
    }

    // Apply sorting
    switch (options.sortBy) {
      case 'oldest':
        query = query.order('date', { ascending: true })
        break
      case 'title':
        query = query.order('title', { ascending: true })
        break
      case 'featured':
        query = query.order('featured', { ascending: false }).order('date', { ascending: false })
        break
      default: // 'newest'
        query = query.order('date', { ascending: false })
        break
    }

    // Apply limit
    if (options.limit && options.limit > 0) {
      query = query.limit(Math.min(100, options.limit))
    }

    const { data, error } = await query

    if (error) {
      console.error('Error fetching filtered gallery items:', error.message)
      return []
    }

    return (data as GalleryItem[]) || []
  }, [], 'getFilteredGalleryItems')
}
                  </motion.div>
                ))}
              </div>
              {item.additional_images.length > 4 && (
                <p className="text-xs text-gray-500 mt-2 text-center">
                  +{item.additional_images.length - 4} more
                </p>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Enhanced drop shadow */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/30 to-primary/50 rounded-xl blur-xl opacity-0 group-hover:opacity-70 transition-all duration-500 -z-10 transform translate-y-4 scale-95 group-hover:scale-100" />
    </motion.div>
  )
}

export default function GallerySection() {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  })

  // State for storing gallery items
  const [recentItems, setRecentItems] = useState<GalleryItem[]>([])
  const [isLoading, setIsLoading] = useState(true)

  // Fetch gallery items on component mount
  useEffect(() => {
    const fetchItems = async () => {
      try {
        setIsLoading(true)
        const items = await getRecentGalleryItems(6)
        setRecentItems(items)
      } catch (error) {
        console.error('Error fetching recent gallery items:', error)
        setRecentItems([]) // Fallback to empty array
      } finally {
        setIsLoading(false)
      }
    }

    fetchItems()
  }, [])

  return (
    <section id="gallery" ref={ref} className="relative bg-gradient-to-br from-medium-gray via-medium-gray to-gray-100 py-16 sm:py-20 lg:py-24 xl:py-28 overflow-hidden">
      {/* Background decorative elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-10 left-10 w-64 h-64 bg-primary/5 rounded-full blur-3xl" />
        <div className="absolute bottom-20 right-20 w-96 h-96 bg-primary/3 rounded-full blur-3xl" />
        <div className="absolute top-1/2 left-1/4 w-32 h-32 bg-white/5 rounded-full blur-2xl" />
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl relative z-10">
        {/* Section Title */}
        <motion.div
          className="text-center mb-12 sm:mb-16 lg:mb-20"
          variants={fadeInUpSection}
          initial="hidden"
          animate={inView ? 'visible' : 'hidden'}
          transition={{ duration: 1, ease: [0.25, 0.1, 0.25, 1] }}
        >
          <motion.div
            className="inline-block relative"
            variants={fadeInUpSection}
            transition={{ duration: 1, delay: 0.2 }}
          >
            <h2 className="font-karla font-extrabold text-2xl sm:text-3xl lg:text-4xl xl:text-section-title text-primary relative z-10">
              Event Gallery
            </h2>
            <motion.div
              className="absolute -bottom-2 left-1/2 transform -translate-x-1/2 h-1 bg-gradient-to-r from-transparent via-primary to-transparent rounded-full"
              initial={{ width: 0 }}
              animate={inView ? { width: '100%' } : { width: 0 }}
              transition={{ duration: 1.2, delay: 0.8, ease: 'easeOut' }}
            />
          </motion.div>
          <motion.p
            className="text-gray-600 text-base sm:text-lg lg:text-xl mt-4 max-w-2xl mx-auto font-karla"
            variants={fadeInUpSection}
            transition={{ duration: 1, delay: 0.4 }}
          >
            Explore moments from our amazing events and activities
          </motion.p>
        </motion.div>

        {/* Gallery Grid */}
        <motion.div
          className="flex flex-wrap justify-center gap-6 sm:gap-8 lg:gap-10"
          variants={staggerContainer}
          initial="hidden"
          animate={inView ? 'visible' : 'hidden'}
        >
          {isLoading ? (
            // Loading skeleton
            <div className="flex flex-wrap justify-center gap-6 sm:gap-8 lg:gap-10">
              {Array.from({ length: 6 }).map((_, idx) => (
                <div
                  key={idx}
                  className="w-full sm:w-72 md:w-80 h-56 sm:h-64 bg-gray-200 animate-pulse rounded-xl"
                />
              ))}
            </div>
          ) : recentItems.length > 0 ? (
            recentItems.map((item) => (
              <GalleryCardSection key={item.id} item={item} />
            ))
          ) : (
            // No items fallback
            <div className="text-center py-12">
              <p className="text-gray-500 text-lg font-karla">No gallery items to display at the moment.</p>
            </div>
          )}
        </motion.div>

        {/* View All Button */}
        <motion.div
          className="text-center mt-12 sm:mt-16 lg:mt-20"
          variants={fadeInUpSection}
          initial="hidden"
          animate={inView ? 'visible' : 'hidden'}
          transition={{ duration: 1, delay: 1.5 }}
        >
          <Link href="/gallery/view-all">
            <motion.button
              className="inline-flex items-center gap-3 bg-gradient-to-r from-primary to-primary/90 text-white font-karla font-semibold px-8 py-4 rounded-full hover:shadow-xl transition-all duration-300 transform hover:scale-105 group"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              View All Gallery
              <svg 
                xmlns="http://www.w3.org/2000/svg"
                className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" />
              </svg>
            </motion.button>
          </Link>
        </motion.div>
      </div>
    </section>
  )
}
























// ========================================
// 3. GALLERY FILTER COMPONENT
// ========================================

// components/public/ui/GalleryFilter.tsx
import React from 'react'
import { motion } from 'framer-motion'
import { type GalleryCategory } from '@/lib/public/galleryEvents'

interface GalleryFilterProps {
  searchTerm: string
  selectedCategory: string
  sortBy: string
  categories: GalleryCategory[]
  onSearchChange: (value: string) => void
  onCategoryChange: (value: string) => void
  onSortChange: (value: string) => void
  onClearFilters: () => void
}

export function GalleryFilter({
  searchTerm,
  selectedCategory,
  sortBy,
  categories,
  onSearchChange,
  onCategoryChange,
  onSortChange,
  onClearFilters,
}: Readonly<GalleryFilterProps>) {
  // Ensure categories is always an array
  const safeCategories = Array.isArray(categories) ? categories : []

  return (
    <motion.div 
      className="bg-white/90 backdrop-blur-sm rounded-2xl shadow-lg p-6 mb-8 border border-white/20"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
    >
      <div className="flex flex-col lg:flex-row gap-6 items-center">
        {/* Search */}
        <div className="flex-1 w-full lg:w-auto">
          <label htmlFor="gallery-search" className="block text-sm font-medium text-gray-700 mb-2">
            Search Events
          </label>
          <div className="relative">
            <svg
              className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
            <input
              id="gallery-search"
              type="text"
              placeholder="Search by title, description, or tags..."
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all duration-300"
            />
            {searchTerm && (
              <button
                onClick={() => onSearchChange('')}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </div>
        </div>

        {/* Category Filter */}
        <div className="w-full lg:w-auto">
          <label htmlFor="gallery-category-select" className="block text-sm font-medium text-gray-700 mb-2">
            Category
          </label>
          <select
            id="gallery-category-select"
            aria-label="Filter by category"
            value={selectedCategory}
            onChange={(e) => onCategoryChange(e.target.value)}
            className="w-full lg:w-auto px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all duration-300 bg-white"
          >
            <option value="">All Categories</option>
            {safeCategories.map((category) => (
              <option key={category} value={category}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </option>
            ))}
          </select>
        </div>

        {/* Sort */}
        <div className="w-full lg:w-auto">
          <label htmlFor="gallery-sort-select" className="block text-sm font-medium text-gray-700 mb-2">
            Sort By
          </label>
          <select
            id="gallery-sort-select"
            aria-label="Sort gallery"
            value={sortBy}
            onChange={(e) => onSortChange(e.target.value)}
            className="w-full lg:w-auto px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary transition-all duration-300 bg-white"
          >
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="featured">Featured First</option>
            <option value="title">Title A-Z</option>
          </select>
        </div>

        {/* Clear Filters */}
        <div className="w-full lg:w-auto">
          <label className="block text-sm font-medium text-transparent mb-2 select-none">
            Actions
          </label>
          <button
            onClick={onClearFilters}
            className="w-full lg:w-auto px-6 py-3 text-primary font-semibold hover:bg-primary hover:text-white transition-all duration-300 rounded-xl border border-primary"
          >
            Clear Filters
          </button>
        </div>
      </div>

      {/* Active Filters Display */}
      {(searchTerm || selectedCategory) && (
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex flex-wrap gap-2 items-center">
            <span className="text-sm font-medium text-gray-600">Active filters:</span>
            {searchTerm && (
              <span className="inline-flex items-center gap-1 px-3 py-1 bg-primary/10 text-primary text-sm rounded-full">
                Search: "{searchTerm}"
                <button
                  onClick={() => onSearchChange('')}
                  className="ml-1 text-primary hover:text-primary/70"
                >
                  ×
                </button>
              </span>
            )}
            {selectedCategory && (
              <span className="inline-flex items-center gap-1 px-3 py-1 bg-primary/10 text-primary text-sm rounded-full">
                Category: {selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)}
                <button
                  onClick={() => onCategoryChange('')}
                  className="ml-1 text-primary hover:text-primary/70"
                >
                  ×
                </button>
              </span>
            )}
          </div>
        </div>
      )}
    </motion.div>
  )
}























// ========================================
// 4. GALLERY CARD COMPONENT
// ========================================

// components/public/ui/GalleryCard.tsx
import React, { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import Image from 'next/image'
import { GalleryItem } from '@/lib/public/galleryEvents'

// Animation variants
const scaleInCard = {
  hidden: { opacity: 0, scale: 0.8 },
  visible: { opacity: 1, scale: 1 }
}

// Utility function to get random rotation
const getRandomRotationCard = (id: string): number => {
  // Create a simple hash from the id to get consistent rotation
  let hash = 0
  for (let i = 0; i < id.length; i++) {
    const char = id.charCodeAt(i)
    hash = ((hash << 5) - hash) + char
    hash = hash & hash // Convert to 32-bit integer
  }
  // Return rotation between -3 and 3 degrees
  return (hash % 7) - 3
}

// Utility function to get size classes
const getSizeClassesCard = (size: 'small' | 'medium' | 'large'): string => {
  switch (size) {
    case 'small':
      return 'w-48 h-64 sm:w-56 sm:h-72'
    case 'medium':
      return 'w-56 h-72 sm:w-64 sm:h-80'
    case 'large':
      return 'w-64 h-80 sm:w-72 sm:h-96'
    default:
      return 'w-56 h-72 sm:w-64 sm:h-80'
  }
}

interface GalleryCardProps {
  readonly item: GalleryItem
  readonly onClick?: () => void
}

export function GalleryCard({ item, onClick }: GalleryCardProps) {
  const [showPreview, setShowPreview] = useState(false)

  const handleMorePicsClick = (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (onClick) {
      onClick()
    } else {
      window.location.href = `/gallery/event/${item.id}`
    }
  }

  const handleCardClick = () => {
    if (onClick) {
      onClick()
    } else {
      window.location.href = `/gallery/event/${item.id}`
    }
  }

  // Format date for display
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      })
    } catch {
      return dateString
    }
  }

  const rotation = getRandomRotationCard(item.id)

  return (
    <motion.div
      className="relative group cursor-pointer"
      style={{ rotate: `${rotation}deg` }}
      variants={scaleInCard}
      transition={{ duration: 0.6, ease: [0.25, 0.1, 0.25, 1] }}
      onHoverStart={() => {
        setTimeout(() => setShowPreview(true), 200)
      }}
      onHoverEnd={() => {
        setShowPreview(false)
      }}
      whileHover={{
        rotate: 0,
        scale: 1.05,
        zIndex: 10,
        transition: { duration: 0.3, ease: 'easeOut' }
      }}
      onClick={handleCardClick}
    >
      {/* Main Card */}
      <div className={`${getSizeClassesCard(item.size)} relative overflow-hidden rounded-xl shadow-xl hover:shadow-2xl transition-all duration-500 bg-gradient-to-br from-primary via-primary to-primary/90`}>
        {/* Image */}
        <div className="relative h-3/4 overflow-hidden">
          <Image
            src={item.main_image}
            alt={item.title}
            fill
            className="object-cover transition-transform duration-700 group-hover:scale-110"
            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, 33vw"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-60 group-hover:opacity-80 transition-opacity duration-300" />
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out" />
          
          <div className="absolute top-3 left-3">
            <span className="bg-white/20 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-full border border-white/30 capitalize">
              {item.category}
            </span>
          </div>
          
          <div className="absolute top-3 right-3">
            <span className="bg-black/30 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-full">
              {formatDate(item.date)}
            </span>
          </div>

          {item.featured && (
            <div className="absolute top-12 left-3">
              <span className="bg-yellow-500/90 backdrop-blur-sm text-black text-xs font-bold px-2 py-1 rounded-full border border-yellow-400">
                Featured
              </span>
            </div>
          )}
        </div>

        {/* Content */}
        <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-primary via-primary/95 to-transparent">
          <h3 className="font-karla font-bold text-white text-sm sm:text-base mb-2 line-clamp-2">
            {item.title}
          </h3>
          <p className="text-white/80 text-xs mb-3 line-clamp-2 font-karla">
            {item.description}
          </p>
          
          {/* Tags */}
          {item.tags && item.tags.length > 0 && (
            <div className="flex flex-wrap gap-1 mb-2">
              {item.tags.slice(0, 2).map((tag: string, idx: number) => (
                <span key={`tag-${item.id}-${idx}`} className="bg-white/10 text-white text-xs px-2 py-0.5 rounded-full">
                  {tag}
                </span>
              ))}
              {item.tags.length > 2 && (
                <span className="bg-white/10 text-white text-xs px-2 py-0.5 rounded-full">
                  +{item.tags.length - 2}
                </span>
              )}
            </div>
          )}
          
          <button
            onClick={handleMorePicsClick}
            className="relative overflow-hidden bg-white/10 hover:bg-white/20 backdrop-blur-sm text-white text-xs sm:text-sm font-medium px-3 py-1.5 rounded-full transition-all duration-300 group/btn border border-white/20 hover:border-white/40"
          >
            <span className="relative z-10 flex items-center gap-1">
              More Pics ({item.additional_images?.length || 0})
              <svg className="w-3 h-3 transition-transform duration-300 group-hover/btn:translate-x-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </span>
            <div className="absolute inset-0 bg-white/10 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300 rounded-full" />
          </button>
        </div>

        <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-white/20 via-transparent to-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none border border-transparent">
          <div className="w-full h-full rounded-xl bg-transparent" />
        </div>
      </div>

      {/* Additional Images Preview */}
      <AnimatePresence>
        {showPreview && item.additional_images && item.additional_images.length > 0 && (
          <motion.div
            className="absolute -right-2 top-1/2 transform -translate-y-1/2 z-20"
            initial={{ opacity: 0, x: -20, scale: 0.8 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: -20, scale: 0.8 }}
            transition={{ duration: 0.3, ease: 'easeOut' }}
          >
            <div className="bg-white/95 backdrop-blur-md rounded-lg p-3 shadow-2xl border border-white/20 max-w-48">
              <p className="text-xs font-medium text-gray-700 mb-2">More from this event:</p>
              <div className="grid grid-cols-2 gap-2">
                {item.additional_images.slice(0, 4).map((img: string, idx: number) => (
                  <motion.div
                    key={`preview-${item.id}-${idx}`}
                    className="relative w-20 h-16 rounded-md overflow-hidden"
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    </motion.div>
                ))}
              </div>
              {item.additional_images.length > 4 && (
                <p className="text-xs text-gray-500 mt-2 text-center">
                  +{item.additional_images.length - 4} more
                </p>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Enhanced drop shadow */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary/30 to-primary/50 rounded-xl blur-xl opacity-0 group-hover:opacity-70 transition-all duration-500 -z-10 transform translate-y-4 scale-95 group-hover:scale-100" />
    </motion.div>
  )
}

export default function GallerySection() {
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  })

  // State for storing gallery items
  const [recentItems, setRecentItems] = useState<GalleryItem[]>([])
  const [isLoading, setIsLoading] = useState(true)

  // Fetch gallery items on component mount
  useEffect(() => {
    const fetchItems = async () => {
      try {
        setIsLoading(true)
        const items = await getRecentGalleryItems(6)
        setRecentItems(items)
      } catch (error) {
        console.error('Error fetching recent gallery items:', error)
        setRecentItems([]) // Fallback to empty array
      } finally {
        setIsLoading(false)
      }
    }

    fetchItems()
  }, [])

  return (
    <section id="gallery" ref={ref} className="relative bg-gradient-to-br from-medium-gray via-medium-gray to-gray-100 py-16 sm:py-20 lg:py-24 xl:py-28 overflow-hidden">
      {/* Background decorative elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-10 left-10 w-64 h-64 bg-primary/5 rounded-full blur-3xl" />
        <div className="absolute bottom-20 right-20 w-96 h-96 bg-primary/3 rounded-full blur-3xl" />
        <div className="absolute top-1/2 left-1/4 w-32 h-32 bg-white/5 rounded-full blur-2xl" />
      </div>

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl relative z-10">
        {/* Section Title */}
        <motion.div
          className="text-center mb-12 sm:mb-16 lg:mb-20"
          variants={fadeInUpSection}
          initial="hidden"
          animate={inView ? 'visible' : 'hidden'}
          transition={{ duration: 1, ease: [0.25, 0.1, 0.25, 1] }}
        >
          <motion.div
            className="inline-block relative"
            variants={fadeInUpSection}
            transition={{ duration: 1, delay: 0.2 }}
          >
            <h2 className="font-karla font-extrabold text-2xl sm:text-3xl lg:text-4xl xl:text-section-title text-primary relative z-10">
              Event Gallery
            </h2>
            <motion.div
              className="absolute -bottom-2 left-1/2 transform -translate-x-1/2 h-1 bg-gradient-to-r from-transparent via-primary to-transparent rounded-full"
              initial={{ width: 0 }}
              animate={inView ? { width: '100%' } : { width: 0 }}
              transition={{ duration: 1.2, delay: 0.8, ease: 'easeOut' }}
            />
          </motion.div>
          <motion.p
            className="text-gray-600 text-base sm:text-lg lg:text-xl mt-4 max-w-2xl mx-auto font-karla"
            variants={fadeInUpSection}
            transition={{ duration: 1, delay: 0.4 }}
          >
            Explore moments from our amazing events and activities
          </motion.p>
        </motion.div>

        {/* Gallery Grid */}
        <motion.div
          className="flex flex-wrap justify-center gap-6 sm:gap-8 lg:gap-10"
          variants={staggerContainer}
          initial="hidden"
          animate={inView ? 'visible' : 'hidden'}
        >
          {isLoading ? (
            // Loading skeleton
            <div className="flex flex-wrap justify-center gap-6 sm:gap-8 lg:gap-10">
              {Array.from({ length: 6 }).map((_, idx) => (
                <div
                  key={idx}
                  className="w-full sm:w-72 md:w-80 h-56 sm:h-64 bg-gray-200 animate-pulse rounded-xl"
                />
              ))}
            </div>
          ) : recentItems.length > 0 ? (
            recentItems.map((item) => (
              <GalleryCardSection key={item.id} item={item} />
            ))
          ) : (
            // No items fallback
            <div className="text-center py-12">
              <p className="text-gray-500 text-lg font-karla">No gallery items to display at the moment.</p>
            </div>
          )}
        </motion.div>

        {/* View All Button */}
        <motion.div
          className="text-center mt-12 sm:mt-16 lg:mt-20"
          variants={fadeInUpSection}
          initial="hidden"
          animate={inView ? 'visible' : 'hidden'}
          transition={{ duration: 1, delay: 1.5 }}
        >
          <Link href="/gallery/view-all">
            <motion.button
              className="inline-flex items-center gap-3 bg-gradient-to-r from-primary to-primary/90 text-white font-karla font-semibold px-8 py-4 rounded-full hover:shadow-xl transition-all duration-300 transform hover:scale-105 group"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              View All Gallery
              <svg 
                xmlns="http://www.w3.org/2000/svg"
                className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" />
              </svg>
            </motion.button>
          </Link>
        </motion.div>
      </div>
    </section>
  )
}














                    
// ========================================
// 1. VIEW ALL GALLERY PAGE
// ========================================

// app/gallery/view-all/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { useInView } from 'react-intersection-observer'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/navigation'

import { getAllGalleryItems, getAllCategories, type GalleryItem, type GalleryCategory } from '@/lib/public/galleryEvents'

const ITEMS_PER_PAGE = 12

const fadeInUp = {
  hidden: { opacity: 0, y: 60 },
  visible: { opacity: 1, y: 0 },
}

const scaleIn = {
  hidden: { opacity: 0, scale: 0.8 },
  visible: { opacity: 1, scale: 1 },
}

// Gallery Card Component
function GalleryCard({ item }: { item: GalleryItem }) {
  const [rotation] = useState(() => (Math.random() - 0.5) * 6)
  const router = useRouter()

  const getSizeClasses = (size: 'small' | 'medium' | 'large') => {
    switch (size) {
      case 'small':
        return 'w-full h-64'
      case 'medium':
        return 'w-full h-80'
      case 'large':
        return 'w-full h-96'
      default:
        return 'w-full h-80'
    }
  }

  const handleCardClick = () => {
    router.push(`/gallery/event/${item.id}`)
  }

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      })
    } catch {
      return dateString
    }
  }

  return (
    <motion.div
      className="relative group cursor-pointer"
      style={{ rotate: `${rotation}deg` }}
      variants={scaleIn}
      whileHover={{ 
        rotate: 0,
        scale: 1.05,
        transition: { duration: 0.3, ease: 'easeOut' }
      }}
      onClick={handleCardClick}
    >
      <div className={`${getSizeClasses(item.size)} relative overflow-hidden rounded-xl shadow-xl hover:shadow-2xl transition-all duration-500 bg-gradient-to-br from-primary via-primary to-primary/90`}>
        <div className="relative h-3/4 overflow-hidden">
          <Image
            src={item.main_image}
            alt={item.title}
            fill
            className="object-cover transition-transform duration-700 group-hover:scale-110"
            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, 33vw"
          />
          
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent opacity-60 group-hover:opacity-80 transition-opacity duration-300" />
          
          <div className="absolute top-3 left-3">
            <span className="bg-white/20 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-full border border-white/30 capitalize">
              {item.category}
            </span>
          </div>

          <div className="absolute top-3 right-3">
            <span className="bg-black/30 backdrop-blur-sm text-white text-xs font-medium px-2 py-1 rounded-full">
              {formatDate(item.date)}
            </span>
          </div>

          {item.featured && (
            <div className="absolute top-12 left-3">
              <span className="bg-yellow-500/90 backdrop-blur-sm text-black text-xs font-bold px-2 py-1 rounded-full border border-yellow-400">
                Featured
              </span>
            </div>
          )}
        </div>

        <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-primary via-primary/95 to-transparent">
          <h3 className="font-karla font-bold text-white text-sm sm:text-base mb-2 line-clamp-2">
            {item.title}
          </h3>
          
          <p className="text-white/80 text-xs mb-3 line-clamp-2">
            {item.description}
          </p>
          
          <div className="text-white/70 text-xs">
            {item.additional_images?.length || 0} photos
          </div>
        </div>
      </div>
    </motion.div>
  )
}

// Gallery Filter Component
function GalleryFilter({
  searchTerm,
  selectedCategory,
  sortBy,
  categories,
  onSearchChange,
  onCategoryChange,
  onSortChange,
  onClearFilters
}: {
  searchTerm: string
  selectedCategory: string
  sortBy: 'newest' | 'oldest' | 'featured' | 'title'
  categories: GalleryCategory[]
  onSearchChange: (value: string) => void
  onCategoryChange: (value: string) => void
  onSortChange: (value: string) => void
  onClearFilters: () => void
}) {
  return (
    <motion.div
      className="mb-12 bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
    >
      <div className="flex flex-col lg:flex-row gap-4">
        {/* Search */}
        <div className="flex-1">
          <label className="block text-sm font-medium text-gray-700 mb-2">Search</label>
          <div className="relative">
            <svg
              className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              placeholder="Search events..."
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>
        </div>

        {/* Category Filter */}
        <div className="flex-1">
          <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
          <select
            value={selectedCategory}
            onChange={(e) => onCategoryChange(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
          >
            <option value="">All Categories</option>
            {categories.map(category => (
              <option key={category} value={category}>
                {category.charAt(0).toUpperCase() + category.slice(1)}
              </option>
            ))}
          </select>
        </div>

        {/* Sort */}
        <div className="flex-1">
          <label className="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
          <select
            value={sortBy}
            onChange={(e) => onSortChange(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
          >
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="featured">Featured First</option>
            <option value="title">Title A-Z</option>
          </select>
        </div>

        {/* Clear Filters */}
        <div className="flex items-end">
          <button
            onClick={onClearFilters}
            className="px-6 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
          >
            Clear Filters
          </button>
        </div>
      </div>
    </motion.div>
  )
}

export default function ViewAllGalleryPage() {
  const [currentPage, setCurrentPage] = useState(1)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')
  const [sortedBy, setSortedBy] = useState<'newest' | 'oldest' | 'featured' | 'title'>('newest')
  const [filteredItems, setFilteredItems] = useState<GalleryItem[]>([])
  const [allItems, setAllItems] = useState<GalleryItem[]>([])
  const [categories, setCategories] = useState<GalleryCategory[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const { ref, inView } = useInView({ triggerOnce: true, threshold: 0.1 })

  // Fetch data on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true)
        setError(null)
        
        const [itemsData, categoriesData] = await Promise.all([
          getAllGalleryItems(),
          getAllCategories()
        ])
        
        setAllItems(itemsData)
        setCategories(categoriesData)
      } catch (err) {
        console.error('Error fetching data:', err)
        setError('Failed to load gallery data')
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [])

  // Filter and sort items
  useEffect(() => {
    let items = [...allItems]

    // Apply search filter
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim()
      items = items.filter(item =>
        item.title.toLowerCase().includes(query) ||
        item.category.toLowerCase().includes(query) ||
        item.description.toLowerCase().includes(query) ||
        item.tags?.some(tag => tag.toLowerCase().includes(query))
      )
    }

    // Apply category filter
    if (selectedCategory) {
      items = items.filter(item => item.category === selectedCategory)
    }

    // Apply sorting
    switch (sortedBy) {
      case 'newest':
        items.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
        break
      case 'oldest':
        items.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
        break
      case 'featured':
        items.sort((a, b) => {
          if (a.featured && !b.featured) return -1
          if (!a.featured && b.featured) return 1
          return new Date(b.date).getTime() - new Date(a.date).getTime()
        })
        break
      case 'title':
        items.sort((a, b) => a.title.localeCompare(b.title))
        break
    }

    setFilteredItems(items)
    setCurrentPage(1)
  }, [searchQuery, selectedCategory, sortedBy, allItems])

  const totalPages = Math.ceil(filteredItems.length / ITEMS_PER_PAGE)
  const paginatedItems = filteredItems.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  )

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-medium-gray via-medium-gray to-gray-100 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 shadow-xl">
          <div className="flex items-center gap-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <span className="text-gray-600 font-medium text-lg">Loading gallery...</span>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-medium-gray via-medium-gray to-gray-100 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 shadow-xl text-center">
          <div className="text-red-500 text-lg font-medium mb-4">{error}</div>
          <button
            onClick={() => window.location.reload()}
            className="bg-primary text-white px-6 py-2 rounded-lg hover:bg-primary/90 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    )
  }

  return (
    <>
      <Head>
        <title>All Gallery Events | Event Gallery</title>
        <meta
          name="description"
          content="Browse all past tech events, workshops and highlights in our full gallery."
        />
      </Head>

      <section
        ref={ref}
        className="relative min-h-screen bg-gradient-to-br from-medium-gray via-medium-gray to-gray-100 py-20 overflow-hidden"
      >
        {/* Background decorative elements */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <div className="absolute top-10 left-10 w-64 h-64 bg-primary/5 rounded-full blur-3xl" />
          <div className="absolute bottom-20 right-20 w-96 h-96 bg-primary/3 rounded-full blur-3xl" />
          <div className="absolute top-1/2 left-1/4 w-32 h-32 bg-white/5 rounded-full blur-2xl" />
        </div>

        <div className="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          
          {/* Page Title */}
          <motion.div
            className="text-center mb-12 sm:mb-16 lg:mb-20"
            variants={fadeInUp}
            initial="hidden"
            animate={inView ? 'visible' : 'hidden'}
            transition={{ duration: 1, ease: [0.25, 0.1, 0.25, 1] }}
          >
            <motion.div
              className="inline-block relative"
              variants={fadeInUp}
              transition={{ duration: 1, delay: 0.2 }}
            >
              <h1 className="font-karla font-extrabold text-2xl sm:text-3xl lg:text-4xl xl:text-5xl text-primary relative z-10">
                All Gallery Events
              </h1>
              <motion.div
                className="absolute -bottom-2 left-1/2 transform -translate-x-1/2 h-1 bg-gradient-to-r from-transparent via-primary to-transparent rounded-full"
                initial={{ width: 0 }}
                animate={inView ? { width: '100%' } : { width: 0 }}
                transition={{ duration: 1.2, delay: 0.8, ease: 'easeOut' }}
              />
            </motion.div>
            <motion.p
              className="text-gray-600 text-base sm:text-lg lg:text-xl mt-4 max-w-2xl mx-auto font-karla"
              variants={fadeInUp}
              transition={{ duration: 1, delay: 0.4 }}
            >
              Browse every moment from our past events and programs.
            </motion.p>
            
            {/* Stats */}
            <motion.div
              className="flex flex-wrap justify-center gap-8 mt-8"
              variants={fadeInUp}
              transition={{ duration: 1, delay: 0.6 }}
            >
              <div className="text-center">
                <div className="text-2xl sm:text-3xl font-bold text-primary">{allItems.length}</div>
                <div className="text-gray-600 text-sm">Total Events</div>
              </div>
              <div className="text-center">
                <div className="text-2xl sm:text-3xl font-bold text-primary">
                  {allItems.reduce((sum, item) => sum + (item.additional_images?.length || 0), 0)}
                </div>
                <div className="text-gray-600 text-sm">Total Photos</div>
              </div>
              <div className="text-center">
                <div className="text-2xl sm:text-3xl font-bold text-primary">
                  {categories.length}
                </div>
                <div className="text-gray-600 text-sm">Categories</div>
              </div>
            </motion.div>
          </motion.div>

          {/* Filters */}
          <GalleryFilter
            searchTerm={searchQuery}
            selectedCategory={selectedCategory}
            sortBy={sortedBy}
            categories={categories}
            onSearchChange={setSearchQuery}
            onCategoryChange={(value) => {
              setSelectedCategory(value)
              setCurrentPage(1)
            }}
            onSortChange={(value) => setSortedBy(value as 'newest' | 'oldest' | 'featured' | 'title')}
            onClearFilters={() => {
              setSearchQuery('')
              setSelectedCategory('')
              setSortedBy('newest')
              setCurrentPage(1)
            }}
          />

          {/* Gallery Grid */}
          <motion.div
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 mb-12"
            initial="hidden"
            animate={inView ? 'visible' : 'hidden'}
            variants={{
              visible: {
                transition: {
                  staggerChildren: 0.1
                }
              }
            }}
          >
            {paginatedItems.length === 0 ? (
              <div className="col-span-full text-center py-20">
                <div className="text-gray-400 text-6xl mb-4">🔍</div>
                <p className="text-gray-500 font-karla text-lg mb-4">
                  {filteredItems.length === 0 && (searchQuery || selectedCategory) 
                    ? 'No events found matching your filters.' 
                    : 'No events found.'
                  }
                </p>
                {(searchQuery || selectedCategory) && (
                  <button
                    onClick={() => {
                      setSearchQuery('')
                      setSelectedCategory('')
                      setSortedBy('newest')
                      setCurrentPage(1)
                    }}
                    className="text-primary hover:text-primary/80 font-medium underline"
                  >
                    Clear all filters
                  </button>
                )}
              </div>
            ) : (
              paginatedItems.map((item, index) => (
                <motion.div
                  key={item.id}
                  variants={scaleIn}
                  transition={{ 
                    duration: 0.6, 
                    ease: [0.25, 0.1, 0.25, 1],
                    delay: index * 0.1 
                  }}
                >
                  <GalleryCard item={item} />
                </motion.div>
              ))
            )}
          </motion.div>

          {/* Pagination */}
          {totalPages > 1 && (
            <motion.div
              className="flex justify-center mt-16"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.5 }}
            >
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/20">
                <div className="flex items-center justify-between mb-4">
                  <p className="text-sm text-gray-600">
                    Showing <span className="font-semibold text-primary">{(currentPage - 1) * ITEMS_PER_PAGE + 1}</span> to{' '}
                    <span className="font-semibold text-primary">{Math.min(currentPage * ITEMS_PER_PAGE, filteredItems.length)}</span> of{' '}
                    <span className="font-semibold text-primary">{filteredItems.length}</span> events
                  </p>
                </div>
                <div className="flex justify-center gap-2 flex-wrap">
                  {/* Previous button */}
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className={`px-3 py-2 rounded-full font-medium font-karla transition-all duration-200 ${
                      currentPage === 1
                        ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                        : 'bg-white text-primary border border-primary hover:bg-primary hover:text-white'
                    }`}
                  >
                    ←
                  </button>

                  {/* Page numbers */}
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i
                    return (
                      <button
                        key={pageNum}
                        onClick={() => setCurrentPage(pageNum)}
                        className={`px-4 py-2 rounded-full font-medium font-karla transition-all duration-200 ${
                          pageNum === currentPage
                            ? 'bg-primary text-white shadow-lg'
                            : 'bg-white text-primary border border-primary hover:bg-primary hover:text-white'
                        }`}
                      >
                        {pageNum}
                      </button>
                    )
                  })}

                  {/* Next button */}
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className={`px-3 py-2 rounded-full font-medium font-karla transition-all duration-200 ${
                      currentPage === totalPages
                        ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                        : 'bg-white text-primary border border-primary hover:bg-primary hover:text-white'
                    }`}
                  >
                    →
                  </button>
                </div>
              </div>
            </motion.div>
          )}

          {/* Categories Overview */}
          {categories.length > 0 && (
            <motion.div
              className="mt-20 text-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.7 }}
            >
              <h2 className="font-karla font-bold text-xl sm:text-2xl text-primary mb-6">
                Event Categories
              </h2>
              <div className="flex flex-wrap justify-center gap-3">
                {categories.map((category) => {
                  const count = allItems.filter(item => item.category === category).length
                  return (
                    <motion.button
                      key={category}
                      onClick={() => {
                        setSelectedCategory(selectedCategory === category ? '' : category)
                        setCurrentPage(1)
                      }}
                      className={`px-4 py-2 rounded-full text-sm font-medium border transition-all duration-300 cursor-pointer ${
                        selectedCategory === category
                          ? 'bg-primary text-white border-primary'
                          : 'bg-white/60 backdrop-blur-sm text-gray-700 border-white/30 hover:bg-primary hover:text-white hover:border-primary'
                      }`}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      {category.charAt(0).toUpperCase() + category.slice(1)} ({count})
                    </motion.button>
                  )
                })}
              </div>
            </motion.div>
          )}
        </div>
      </section>
    </>
  )
}